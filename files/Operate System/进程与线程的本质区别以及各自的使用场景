进程、线程的区别和使用场景
1. 进程
进程是系统进行资源分配和调度的一个独立单位 。

程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为进程。

在多道编程中，我们允许多个程序同时加载到内存中，在操作系统的调度下，可以实现并发地执行。

进程的出现让每个用户感觉到自己独享CPU，因此，进程就是为了在CPU上实现多道编程而提出的。

2. 线程
引入：为什么需要线程
进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。
进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。
线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。
3. 区别
线程是进程的一个实体，是比进程更小的能独立运行的基本单位
进程有独立的地址空间，而线程没有，线程只有自己的栈、程序计数器、寄存器
进程崩溃时不会对其他进程产生影响，线程崩溃时整个进程都会崩溃
进程切换、创建、销毁比较麻烦，线程比较简单
4. 多进程和多线程的使用场景
对比维度	多进程	多线程
数据共享、同步	数据共享复杂，需要用IPC；数据是分开的，同步简单	因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂
内存、CPU	占用内存多，切换复杂，CPU利用率低	占用内存少，切换简单，CPU利用率高
创建销毁、切换	创建销毁、切换复杂，速度慢	创建销毁、切换简单，速度很快
编程、调试	编程简单，调试简单	编程复杂，调试复杂
可靠性	进程间不会互相影响	一个线程挂掉将导致整个进程挂掉
分布式	适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单	适应于多核分布式
